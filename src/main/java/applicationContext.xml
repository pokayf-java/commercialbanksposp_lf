<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd 
    http://cxf.apache.org/jaxws   
    http://cxf.apache.org/schemas/jaxws.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/cache  
    http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">


	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	<!-- <import resource="classpath:META-INF/cxf/cxf-extension-xml.xml" /> -->


	<!-- 引入properties文件 -->
	<context:property-placeholder location="classpath:/appConfig.properties" />

	<!-- 定义数据库连接池数据源bean destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 设置JDBC驱动名称 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 设置JDBC连接URL -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 设置数据库用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!-- 设置数据库密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 设置连接池初始值 -->
		<property name="initialPoolSize" value="20" />
		<property name="checkoutTimeout" value="20000" />
		<property name="testConnectionOnCheckin" value="true"/>
		<property name="idleConnectionTestPeriod" value="60"/>
		
	</bean>

	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />

		<!-- hibernate的相关属性配置 -->
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
				<!-- 设置自动创建|更新|验证数据库表结构 validate-->
				hibernate.hbm2ddl.auto= update
				<!-- 是否在控制台显示sql -->
				hibernate.show_sql=true
				<!-- 是否格式化sql，优化显示 -->
				hibernate.format_sql=true
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=false
				<!-- 数据库批量查询最大数 -->
				hibernate.jdbc.fetch_size=2
				<!-- 数据库批量更新、添加、删除操作最大数 -->
				hibernate.jdbc.batch_size=50
				<!-- 是否自动提交事务 -->
				hibernate.connection.autocommit=true
				<!-- 指定hibernate在何时释放JDBC连接 -->
				hibernate.connection.release_mode=auto
				<!-- 创建session方式 hibernate4.x 的方式 -->
				hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext
				<!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
					所以把它设置为none即可 -->
				javax.persistence.validation.mode=none

				<!-- hibernate.current_session_context_class=thread -->
			</value>
		</property>
		<!-- 自动扫描实体对象 tdxy.bean的包结构中存放实体类 -->
		<property name="packagesToScan" value="com.poka.app.anno.enity" />
	</bean>

	<!-- 定义事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<!-- 定义 Autowired 自动注入 bean -->
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<!-- 扫描有注解的文件 base-package 包路径 -->
	<context:component-scan base-package="com.poka.app.anno" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务执行方式 REQUIRED：指定当前方法必需在事务环境中运行， 如果当前有事务环境就加入当前正在执行的事务环境， 如果当前没有事务，就新建一个事务。 
				这是默认值。 -->
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="import*" propagation="REQUIRED" />
			<tx:method name="batch*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<!-- 指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 查询定义即可 
				read-only="true" 表示只读 -->
			<tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义切面，在* com.poka.app.cb.anno.*.service.*ServiceImpl.*(..)) 中执行有关的hibernate 
		session的事务操作 -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* com.poka.app.anno.base.service.impl.*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>

	<!-- 配置任务调度 -->
	<bean id="doPayAppQryJob" class="com.poka.app.quartz.DoPayAppQryJob"></bean>
	<bean id="doPerinfoAndBranchInfoJob" class="com.poka.app.quartz.DoPerinfoAndBranchInfoJob"></bean>
	<bean id="doBankAndNetRepJob" class="com.poka.app.quartz.DoBankAndNetRepJob"></bean>
	<bean id="doProduceJob" class="com.poka.app.quartz.DoProduceJob"></bean>
	<bean id="doDeleteLogsJob" class="com.poka.app.quartz.DoDeleteLogsJob"></bean>
	<bean id="doUpdateMonRuleJob" class="com.poka.app.quartz.DoUpdateMonRuleJob"></bean>
	<bean id="doBagInfoJob" class="com.poka.app.quartz.DoBagInfoJob"></bean>
	<bean id="doLanBiaoJob" class="com.poka.app.quartz.DoLanBiaoJob"></bean>
	<bean id="doDatFileImportJob" class="com.poka.app.quartz.DoDatFileImportJob"></bean>
	<bean id="doLBTJDatImportJob" class="com.poka.app.quartz.DoLBTJDatImportJob"></bean>
	<bean id="doCoreDataImportJob" class="com.poka.app.quartz.DoCoreDataImportJob"></bean>
	<bean id="doDatFileDeleteJob" class="com.poka.app.quartz.DoDatFileDeleteJob"></bean>
	<bean id="doNetPeiChaoJob" class="com.poka.app.quartz.DoNetPeiChaoJob"></bean>
	<bean id="doAtmJiaChaoJob" class="com.poka.app.quartz.DoAtmJiaChaoJob"></bean>
	<bean id="doChaoXJiaChaoJob" class="com.poka.app.quartz.DoChaoXJiaChaoJob"></bean>
	<bean id="doZhKunqkJob" class="com.poka.app.quartz.DoZhKunqkJob"></bean>
	<bean id="doCIBAgencyJob" class="com.poka.app.quartz.DoCIBAgencyJob"></bean>
	
	<!-- 定义调用对象和调用对象的方法 -->
	
	<!-- 兴业银行代理功能 -->
	<bean id="jobDoCIBAgencyJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doCIBAgencyJob" />
		<property name="targetMethod" value="work" />
	</bean>

	<bean id="jobDoPayAppQryDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doPayAppQryJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoAtmJiaChaoDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doAtmJiaChaoJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoChaoXJiaChaoDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doChaoXJiaChaoJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoNetPeiChaoDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doNetPeiChaoJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoLBTJDatImportDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doLBTJDatImportJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoCoreDataImportDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doCoreDataImportJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoLanBiaoDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doLanBiaoJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoDatFileImportDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doDatFileImportJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoDatFileDeleteDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doDatFileDeleteJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoBagInfoDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doBagInfoJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoDelLogsDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doDeleteLogsJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoUpdateMonDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doUpdateMonRuleJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobDoProDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doProduceJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobPbDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doPerinfoAndBranchInfoJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobBankAndNetRepDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doBankAndNetRepJob" />
		<property name="targetMethod" value="work" />
	</bean>
	
	<bean id="jobZhKunqkDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="doZhKunqkJob" />
		<property name="targetMethod" value="work" />
	</bean>

	<!-- 定义触发时间  SimpleTriggerFactoryBean-->
	
	<bean id="doCIBAgencyTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoCIBAgencyJobDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每600秒执行一次 -->
		<property name="repeatInterval" value="600000" />
	</bean>
	
	<bean id="doZhKunqkTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="jobZhKunqkDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每600秒执行一次 -->
		<property name="repeatInterval" value="600000" />
	</bean>
	
	<bean id="doPayAppQryTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoPayAppQryDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每600秒执行一次 -->
		<property name="repeatInterval" value="600000" />
	</bean>
	
	<bean id="doDelDatFileTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoDatFileDeleteDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每月最后一天的7点执行 -->
		<property name="cronExpression" value="0 0 7 L * ?"></property>
	</bean>
	
	<bean id="doDatFileImportTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoDatFileImportDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的凌晨6点执行 -->
		<property name="cronExpression" value="0 0 6 * * ?"></property>
	</bean>
	
	<bean id="doLBTJDatImportTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoLBTJDatImportDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的凌晨7点执行 -->
		<property name="cronExpression" value="0 0 7 * * ?"></property>
	</bean>
	
	<bean id="doCoreDataImportTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoCoreDataImportDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的凌晨6点半执行 -->
		<property name="cronExpression" value="0 30 6 * * ?"></property>
	</bean>
	
	<bean id="doNetPeiChaoTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoNetPeiChaoDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的凌晨1点执行 -->
		<property name="cronExpression" value="0 0 1 * * ?"></property>
	</bean>
	
	<bean id="doAtmJiaChaoTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoAtmJiaChaoDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的凌晨2点执行 -->
		<property name="cronExpression" value="0 0 2 * * ?"></property>
	</bean>
	
	<bean id="doChaoXJiaChaoTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoChaoXJiaChaoDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的凌晨3点执行 -->
		<property name="cronExpression" value="0 0 3 * * ?"></property>
	</bean>
	
	<bean id="doBankAndNetRepTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobBankAndNetRepDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的凌晨1点20分执行 -->
		<property name="cronExpression" value="0 20 1 * * ?"></property>
	</bean>
	
	<bean id="doLanBiaoTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoLanBiaoDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天的早上10点执行 -->
		<property name="cronExpression" value="0 0 10 * * ?"></property>
	</bean> 
	
	<bean id="doBagInfoTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoBagInfoDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每600秒执行一次 -->
		<property name="repeatInterval" value="600000" />
	</bean>
	
	<bean id="doDelLogsTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoDelLogsDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每月最后一天的凌晨2点执行 -->
		<property name="cronExpression" value="0 0 2 L * ?"></property>
	</bean>
	
	<bean id="doProTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoProDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天凌晨1点10分执行 -->
		<property name="cronExpression" value="0 10 1 * * ?"></property>
	</bean>
	
	<bean id="doUpdateMonTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDoUpdateMonDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天凌晨四点执行 -->
		<property name="cronExpression" value="0 0 4 * * ?"></property>
	</bean>
	
	<bean id="dopbTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobPbDetail" />
		<property name="startDelay" value="1000" />
		<!-- 每天凌晨一点半执行 -->
		<property name="cronExpression" value="0 30 1 * * ?"></property>
	</bean>
	
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doCIBAgencyTrigger"/>
				<ref bean="doPayAppQryTrigger"/>
				<ref bean="dopbTrigger"/>
				<ref bean="doBankAndNetRepTrigger"/>
				<ref bean="doProTrigger"/>
				<ref bean="doDelLogsTrigger"/>
				<ref bean="doUpdateMonTrigger"/>
				<ref bean="doBagInfoTrigger"/>
				<ref bean="doLanBiaoTrigger"/>
				<ref bean="doDatFileImportTrigger"/>
				<ref bean="doCoreDataImportTrigger"/>
				<ref bean="doLBTJDatImportTrigger"/>
				<ref bean="doDelDatFileTrigger"/>
				<ref bean="doNetPeiChaoTrigger"/>
				<ref bean="doAtmJiaChaoTrigger"/>
				<ref bean="doChaoXJiaChaoTrigger"/>
				<ref bean="doZhKunqkTrigger"/>
			</list>
		</property>
		<property name="jobFactory">
			<bean class="com.poka.app.util.PokaSpringBeanJobFactory" />
		</property>
	</bean>


	<bean id="cBPospSW" class="com.poka.app.cb.ws.impl.CBPospSW"></bean>
	<jaxws:endpoint id="cbPospService" implementor="#cBPospSW"
		address="/cbService">
		<jaxws:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
		</jaxws:inInterceptors>
		<jaxws:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
		</jaxws:outInterceptors>
	</jaxws:endpoint>
	
	<bean id="gzhQuerySW" class="com.poka.app.cb.ws.impl.GzhQuerySW"></bean>
	<jaxws:endpoint id="gzhQueryService" implementor="#gzhQuerySW"
		address="/gzhQueryService">
		<jaxws:inInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingInInterceptor" />
		</jaxws:inInterceptors>
		<jaxws:outInterceptors>
			<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
		</jaxws:outInterceptors>
	</jaxws:endpoint>

	<!-- 工具bean -->
	<bean id="cxfUtil" class="com.poka.app.util.CxfUtil"></bean>
</beans>  